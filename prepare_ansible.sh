#!/bin/bash

# This script automates the entire preparation for running Ansible on Multipass VMs:
# 1. Finds all running Multipass VMs.
# 2. Creates a dynamic Ansible inventory based on those VMs.
# 3. Finds a local public SSH key.
# 4. Injects the public SSH key into the authorized_keys of each running VM for passwordless access.

set -e # Exit immediately if a command exits with a non-zero status.

# --- 1. Prerequisite Check ---
echo "Checking for required tools (multipass, jq)..."
if ! command -v multipass &> /dev/null; then
    echo "ERROR: multipass command not found. Please install Multipass first."
    exit 1
fi
if ! command -v jq &> /dev/null; then
    echo "ERROR: jq command not found. Please install jq (e.g., 'brew install jq' or 'sudo apt-get install jq')."
    exit 1
fi
echo "All tools are present."

# --- 2. Find Local SSH Public Key ---
echo "
Searching for a suitable public SSH key in ~/.ssh/ ..."
PUBLIC_KEY_FILE=""
for key_type in id_ed25519.pub id_rsa.pub; do
    if [ -f "$HOME/.ssh/$key_type" ]; then
        PUBLIC_KEY_FILE="$HOME/.ssh/$key_type"
        echo "Found public key: $PUBLIC_KEY_FILE"
        break
    fi
done

if [ -z "$PUBLIC_KEY_FILE" ]; then
    echo "ERROR: No public SSH key (id_ed25519.pub or id_rsa.pub) found in ~/.ssh/"
    echo "Please generate one with 'ssh-keygen -t ed25519'"
    exit 1
fi

PRIVATE_KEY_FILE="${PUBLIC_KEY_FILE%.pub}" # Remove .pub to get the private key path
PUBLIC_KEY_CONTENT=$(cat "$PUBLIC_KEY_FILE")

# --- 3. Dynamic Inventory Generation ---
ANSIBLE_DIR="ansible"
INVENTORY_FILE="$ANSIBLE_DIR/inventory"

echo "
Creating Ansible directory and inventory file at $INVENTORY_FILE..."
mkdir -p "$ANSIBLE_DIR"

# Write the static part of the inventory
cat > "$INVENTORY_FILE" << EOF
# This inventory was auto-generated by prepare_ansible.sh

[all:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=$PRIVATE_KEY_FILE
ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

[controller]
EOF

# Get instance data from multipass
INSTANCE_DATA=$(multipass list --format json | jq -r '.list[] | select(.state == "Running") | .name + " " + .ipv4[0]')

if [ -z "$INSTANCE_DATA" ]; then
    echo "ERROR: No running Multipass instances found."
    exit 1
}

# Process instances and append to inventory
CONTROLLER_CONFIG=""
WORKER_CONFIG=""

while read -r name ip; do
    if [[ "$name" == "controller-node" ]]; then
        CONTROLLER_CONFIG+="$name ansible_host=$ip\n"
    elif [[ "$name" == worker-* ]]; then
        WORKER_CONFIG+="$name ansible_host=$ip\n"
    fi
done <<< "$INSTANCE_DATA"

echo -e "$CONTROLLER_CONFIG" >> "$INVENTORY_FILE"
echo -e "
[workers]" >> "$INVENTORY_FILE"
echo -e "$WORKER_CONFIG" >> "$INVENTORY_FILE"

echo "Ansible inventory file has been successfully generated."

# --- 4. Automated SSH Configuration ---
echo "
Configuring SSH access for all running instances..."

while read -r name ip; do
    echo "--- Configuring instance: $name ($ip) ---"
    # Use $HOME inside the double-quoted string to ensure it's evaluated on the remote machine
    # Use a here-document (EOF) for the remote command to avoid complex quoting issues
    # Check for success of each command
    if multipass exec "$name" -- bash <<EOF
        set -e # Exit on first error within this remote script
        mkdir -p $HOME/.ssh
        echo '$PUBLIC_KEY_CONTENT' > $HOME/.ssh/authorized_keys
        chmod 700 $HOME/.ssh
        chmod 600 $HOME/.ssh/authorized_keys
        chown -R $USER:$USER $HOME/.ssh
EOF
    then
        echo "Instance $name configured successfully."
    else
        echo "ERROR: Failed to configure SSH for instance $name. Please check the output above for details."
        # Do not exit the entire script, but log the error
    fi
    echo "" # Add a newline for better readability
done <<< "$INSTANCE_DATA"

echo "
-----------------------------------------"
echo "SSH configuration attempt completed for all running instances."
echo "Please review the output for any errors."
echo "You can now run your Ansible playbook:"
echo "ansible-playbook -i $INVENTORY_FILE $ANSIBLE_DIR/playbook.yml"
